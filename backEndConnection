
// Importing the required modules
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const dotenv = require('dotenv');

// Load environment variables from a .env file
dotenv.config();

// Initialize the Express app
const app = express();
const PORT = process.env.PORT || 5000;

// PostgreSQL Connection Pool
const pool = new Pool({
  user: process.env.PG_USER,
  host: process.env.PG_HOST,
  database: process.env.PG_DATABASE,
  password: process.env.PG_PASSWORD,
  port: process.env.PG_PORT,
});

// Middleware
app.use(cors());
app.use(express.json());

// Endpoint to get all users with their transactions
app.get('/api/users', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT u.id, u.name, u.email, u.account_balance, json_agg(t.*) AS transactions
      FROM users u
      LEFT JOIN transactions t ON u.id = t.user_id
      GROUP BY u.id
    `);
    res.json(result.rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
});

// Endpoint to get transactions for a specific user
app.get('/api/users/:userId/transactions', async (req, res) => {
  const userId = req.params.userId;
  try {
    const result = await pool.query('SELECT * FROM transactions WHERE user_id = $1', [userId]);
    res.json(result.rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
});

// Endpoint to create a new user
app.post('/api/users', async (req, res) => {
  const { name, email, account_balance } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO users (name, email, account_balance) VALUES ($1, $2, $3) RETURNING *',
      [name, email, account_balance]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
});

// Endpoint to create a new transaction for a specific user
app.post('/api/users/:userId/transactions', async (req, res) => {
  const userId = req.params.userId;
  const { amount, type } = req.body;
  try {
    // Create a new transaction
    const result = await pool.query(
      'INSERT INTO transactions (amount, type, user_id) VALUES ($1, $2, $3) RETURNING *',
      [amount, type, userId]
    );

    // Update the user's account balance
    const updateQuery = `
      UPDATE users 
      SET account_balance = account_balance ${type === 'deposit' ? '+' : '-'} $1
      WHERE id = $2
      RETURNING *;
    `;
    const updatedUser = await pool.query(updateQuery, [amount, userId]);

    res.status(201).json({ transaction: result.rows[0], updatedUser: updatedUser.rows[0] });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
});

// Endpoint to delete a user and their transactions
app.delete('/api/users/:userId', async (req, res) => {
  const userId = req.params.userId;
  try {
    await pool.query('DELETE FROM users WHERE id = $1', [userId]);
    res.status(204).send();
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
